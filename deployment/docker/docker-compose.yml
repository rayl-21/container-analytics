# Docker Compose file for Container Analytics Production Deployment
# Compatible with Docker Compose v2+

services:
  # Image Download Scheduler Service
  scheduler:
    build: 
      context: ../../
      dockerfile: Dockerfile
    container_name: container-analytics-scheduler
    restart: always
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=scheduler
      - DOWNLOAD_INTERVAL_MINUTES=${DOWNLOAD_INTERVAL_MINUTES:-10}
      - RETENTION_DAYS=${RETENTION_DAYS:-30}
      - STREAMS=${STREAMS:-in_gate out_gate}
      - DATABASE_URL=sqlite:////data/database.db
    volumes:
      - app_data:/data
      - app_logs:/logs
      - yolo_models:/app/data/models
    healthcheck:
      test: ["CMD", "python", "/app/health_check.py"]
      interval: 2m
      timeout: 30s
      start_period: 1m
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2G
        reservations:
          cpus: '0.1'
          memory: 256M
    networks:
      - container-analytics
    depends_on:
      - redis

  # YOLO Detection Service
  detector:
    build: 
      context: ../../
      dockerfile: Dockerfile
    container_name: container-analytics-detector
    restart: always
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=detector
      - DATABASE_URL=sqlite:////data/database.db
      - YOLO_MODEL_PATH=/app/data/models/yolov8x.pt
    volumes:
      - app_data:/data
      - app_logs:/logs
      - yolo_models:/app/data/models
    healthcheck:
      test: ["CMD", "python", "/app/health_check.py"]
      interval: 2m
      timeout: 30s
      start_period: 2m
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
          # GPU support (uncomment if GPU available)
          # devices:
          #   - driver: nvidia
          #     count: 1
          #     capabilities: [gpu]
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - container-analytics
    depends_on:
      - scheduler
      - redis

  # Streamlit Dashboard Service
  dashboard:
    build: 
      context: ../../
      dockerfile: Dockerfile
    container_name: container-analytics-dashboard
    restart: always
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=dashboard
      - STREAMLIT_PORT=8501
      - DATABASE_URL=sqlite:////data/database.db
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    volumes:
      - app_data:/data
      - app_logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 512M
    networks:
      - container-analytics
    depends_on:
      - scheduler

  # Prometheus Metrics Service
  metrics:
    build: 
      context: ../../
      dockerfile: Dockerfile
    container_name: container-analytics-metrics
    restart: always
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=metrics
    ports:
      - "${METRICS_PORT:-9090}:9090"
    volumes:
      - app_data:/data
      - app_logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - container-analytics

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: container-analytics-redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
        reservations:
          cpus: '0.05'
          memory: 64M
    networks:
      - container-analytics

  # NGINX Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: container-analytics-nginx
    restart: always
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M
    networks:
      - container-analytics
    depends_on:
      - dashboard
      - metrics
    profiles:
      - production  # Only start with --profile production

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:2.9.0
    container_name: container-analytics-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki/config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    networks:
      - container-analytics
    profiles:
      - monitoring  # Only start with --profile monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: container-analytics-grafana
    restart: always
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    networks:
      - container-analytics
    depends_on:
      - metrics
      - loki
    profiles:
      - monitoring  # Only start with --profile monitoring

volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}
  app_logs:
    driver: local
  redis_data:
    driver: local
  yolo_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MODELS_DIR:-./data/models}
  loki_data:
    driver: local
  grafana_data:
    driver: local

networks:
  container-analytics:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16