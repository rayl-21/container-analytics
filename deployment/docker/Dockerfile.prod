# Optimized production Dockerfile for Container Analytics

FROM python:3.10-slim-bullseye AS base

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=0 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# ============================================
# Stage 1: Python dependencies
# ============================================
FROM base AS python-deps

COPY requirements.txt /tmp/

RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
    python -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --upgrade pip setuptools wheel && \
    pip install -r /tmp/requirements.txt && \
    pip install prometheus_client==0.17.1

# ============================================
# Stage 2: Production runtime
# ============================================
FROM base AS production

# Install runtime dependencies and Chrome/Chromium
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    # OpenCV runtime
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    libgl1-mesa-glx \
    # Tesseract OCR
    tesseract-ocr \
    tesseract-ocr-eng \
    # System utilities
    wget \
    curl \
    ca-certificates \
    # Chrome dependencies
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgcc1 \
    libgconf-2-4 \
    libgdk-pixbuf2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxss1 \
    libxtst6 \
    lsb-release \
    xdg-utils \
    # Install Chromium (works on all architectures)
    chromium \
    chromium-driver \
    && ln -s /usr/bin/chromium /usr/bin/google-chrome \
    && ln -s /usr/bin/chromium /usr/bin/google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Copy Python environment
COPY --from=python-deps /opt/venv /opt/venv

ENV PATH="/opt/venv/bin:$PATH" \
    DOCKER_CONTAINER=true

# Create application user
RUN groupadd -r analytics && \
    useradd -r -g analytics -u 1001 analytics && \
    mkdir -p /app /data /logs && \
    chown -R analytics:analytics /app /data /logs

WORKDIR /app

# Copy application code
COPY --chown=analytics:analytics . .

# Create required directories
RUN mkdir -p /app/data/images /app/data/models /app/logs && \
    chown -R analytics:analytics /app

# Copy scripts
COPY --chown=analytics:analytics deployment/entrypoint.sh /app/entrypoint.sh
COPY --chown=analytics:analytics deployment/health_check.py /app/health_check.py

RUN chmod +x /app/entrypoint.sh /app/health_check.py

# Switch to non-root user
USER analytics

# Expose ports
EXPOSE 8501 9090

# Health check
HEALTHCHECK --interval=2m --timeout=30s --start-period=1m --retries=3 \
    CMD python /app/health_check.py

# Default command
ENTRYPOINT ["/app/entrypoint.sh"]